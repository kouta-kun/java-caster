/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javacaster;

import java.awt.Graphics;

/**
 *
 * @author kouta
 */
public class MinimapViewer extends javax.swing.JPanel {

    private Minimap minimap;

    /**
     * Creates new form MinimapViewer
     */
    public MinimapViewer() {
        minimap = new Minimap(new Caster(Map.emptyMap(10)));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setRaycaster(Caster raycaster) {
        minimap.setRaycaster(raycaster);
    }

    @Override
    public void paint(Graphics grphcs) {
        grphcs.clearRect(0, 0, getWidth(), getHeight());
        grphcs.drawImage(minimap.renderMinimap(), 0, 0, getWidth(), getHeight(), null);
    }

    public void setMinimap(Minimap minimap) {
        this.minimap = minimap;
    }

    Minimap getMinimap() {
        return minimap;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
